# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: ci-build-deploy

on:
  release:
    types: [created]
    
#manual trigger
  workflow_dispatch:

jobs:
  build:
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
      GITHUB_ACTOR: ${{ vars.user }}
      # here is for github
      DOCKER_USER: ${{ vars.user }}
      DOCKER_TOKEN: ${{ secrets.token }}
      IMAGE_FILE: ghcr.io/${{ github.repository }}
      LOGIN_OPTION: ghcr.io
      # here is for dockerhub
      # DOCKER_USER: ${{ secrets.dockerhub_user }}
      # DOCKER_TOKEN: ${{ secrets.dockerhub_token }}
      # IMAGE_FILE: ${{ secrets.dockerhub_user }}/${{ github.event.repository.name }}
      # LOGIN_OPTION: ""
      
      DOCKER: ${{ vars.docker }}
      NET: apnet
      SERVICE_DISCOVERY_ADDR: 172.18.0.200
      REPLICA: 2

      # IMAGE_FILE: ${{ github.repository }}:$(date +%s)

    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        # distribution: 'temurin'
        distribution: 'adopt'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      # run: mvn -B package --file pom.xml
      run: mvn clean install -s $GITHUB_WORKSPACE/settings.xml -Dmaven.test.skip=true

    - name: Build Docker image
      run: |
        echo "Build image" $IMAGE_FILE
        docker build -t $IMAGE_FILE .
        
    - name: Push Registry
      run: |
        docker login $LOGIN_OPTION -u $DOCKER_USER -p $DOCKER_TOKEN
        
        # docker login $LOGIN_OPTION -u $GITHUB_ACTOR -p $GITHUB_TOKEN
        
        # for dockerhub
        # docker login -u ${{ secrets.dockerhub_user }} -p ${{ secrets.dockerhub_token }}

        docker push $IMAGE_FILE
        docker logout

    - name: Deploy
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.ssh_private_key }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "${{ secrets.ssh_known_hosts }}" > ~/.ssh/known_hosts
        ssh -t -t -p ${{ secrets.ssh_port }} ${{ secrets.ssh_user }}@${{ secrets.ssh_host }} "
          pwd
          security unlock-keychain -p ${{ secrets.remote_server_token }}
          $DOCKER ps -a -q --filter ancestor=$IMAGE_FILE > cid
          $DOCKER login $LOGIN_OPTION -u $DOCKER_USER -p $DOCKER_TOKEN
          $DOCKER pull $IMAGE_FILE
          for i in {1..$REPLICA}
          do
            $DOCKER run -d --net=$NET --add-host eureka-server:$SERVICE_DISCOVERY_ADDR --restart unless-stopped -p 0:8080 -v ${{ vars.work_dir }}/logs/${{ github.repository }}/\$i\:/logs $IMAGE_FILE
          done
          sleep 2
          cat cid | xargs -r $DOCKER stop
          $DOCKER container prune -f
          $DOCKER image prune -f
          $DOCKER logout
        "
        echo "Deployment done"
    #   run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}

    
    - name: Cleanup
      run: rm -rf ~/.ssh
